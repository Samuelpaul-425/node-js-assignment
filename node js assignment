const express = require('express');
const mongoose = require('mongoose');
const axios = require('axios');
const { Schema } = mongoose;

const app = express();
const port = 3000;

// Connect to MongoDB (Make sure MongoDB is running)
mongoose.connect('mongodb://localhost:27017/your-database-name', { useNewUrlParser: true, useUnifiedTopology: true });

// Define the schema for your collection
const transactionSchema = new Schema({
  product: String,
  dateOfSale: Date,
  price: Number,
  // Add other fields as needed
});

// Create a model based on the schema
const Transaction = mongoose.model('Transaction', transactionSchema);

// Initialize the database with seed data
app.get('/initialize-database', async (req, res) => {
  try {
    // Fetch data from the third-party API
    const response = await axios.get('https://s3.amazonaws.com/roxiler.com/product_transaction.json');
    const seedData = response.data;

    // Insert seed data into the database
    await Transaction.insertMany(seedData);

    res.json({ message: 'Database initialized successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// List all transactions with search and pagination
app.get('/list-transactions', async (req, res) => {
  // Implement your logic to fetch and filter transactions based on the provided parameters
  // Match against dateOfSale and search_text
  // Apply pagination
});

// API for statistics
app.get('/statistics', async (req, res) => {
  // Implement your logic to calculate statistics based on the selected month
  // Total sale amount, total number of sold items, total number of not sold items
});


app.get('/list-transactions', async (req, res) => {
  try {
    const { page = 1, perPage = 10, search = '' } = req.query;

    // Build the query based on search parameters
    const query = search
      ? {
          $or: [
            { product: { $regex: search, $options: 'i' } }, // Case-insensitive product search
            { description: { $regex: search, $options: 'i' } }, // Case-insensitive description search
            { price: { $eq: parseFloat(search) } }, // Exact match on price (assuming price is a number)
          ],
        }
      : {};

    // Fetch transactions with pagination and search
    const transactions = await Transaction.find(query)
      .skip((page - 1) * perPage)
      .limit(parseInt(perPage));

    res.json({ transactions });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});


app.get('/statistics', async (req, res) => {
  try {
    const { month } = req.query;

    if (!month) {
      return res.status(400).json({ error: 'Month parameter is required' });
    }

    const startOfMonth = new Date(`${month}-01`);
    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(startOfMonth.getMonth() + 1);

    // Calculate total sale amount of selected month
    const totalSaleAmount = await Transaction.aggregate([
      {
        $match: {
          dateOfSale: {
            $gte: startOfMonth,
            $lt: endOfMonth,
          },
        },
      },
      {
        $group: {
          _id: null,
          totalSaleAmount: { $sum: '$price' },
        },
      },
    ]);

    // Calculate total number of sold items of selected month
    const totalSoldItems = await Transaction.countDocuments({
      dateOfSale: {
        $gte: startOfMonth,
        $lt: endOfMonth,
      },
    });

    // Calculate total number of not sold items of selected month
    const totalNotSoldItems = await Transaction.countDocuments({
      dateOfSale: {
        $lt: startOfMonth,
      },
    });

    res.json({
      totalSaleAmount: totalSaleAmount.length > 0 ? totalSaleAmount[0].totalSaleAmount : 0,
      totalSoldItems,
      totalNotSoldItems,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});


app.get('/bar-chart', async (req, res) => {
  try {
    const { month } = req.query;

    if (!month) {
      return res.status(400).json({ error: 'Month parameter is required' });
    }

    const startOfMonth = new Date(`${month}-01`);
    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(startOfMonth.getMonth() + 1);

    // Define price ranges
    const priceRanges = [
      { min: 0, max: 100 },
      { min: 101, max: 200 },
      { min: 201, max: 300 },
      { min: 301, max: 400 },
      { min: 401, max: 500 },
      { min: 501, max: 600 },
      { min: 601, max: 700 },
      { min: 701, max: 800 },
      { min: 801, max: 900 },
      { min: 901, max: Infinity },
    ];

    const barChartData = [];

    // Iterate through price ranges and count items in each range
    for (const range of priceRanges) {
      const count = await Transaction.countDocuments({
        dateOfSale: {
          $gte: startOfMonth,
          $lt: endOfMonth,
        },
        price: {
          $gte: range.min,
          $lt: range.max,
        },
      });

      barChartData.push({ priceRange: `${range.min}-${range.max}`, itemCount: count });
    }

    res.json({ barChartData });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});


app.get('/pie-chart', async (req, res) => {
  try {
    const { month } = req.query;

    if (!month) {
      return res.status(400).json({ error: 'Month parameter is required' });
    }

    const startOfMonth = new Date(`${month}-01`);
    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(startOfMonth.getMonth() + 1);

    // Aggregate to find unique categories and count items from each category
    const pieChartData = await Transaction.aggregate([
      {
        $match: {
          dateOfSale: {
            $gte: startOfMonth,
            $lt: endOfMonth,
          },
        },
      },
      {
        $group: {
          _id: '$category',
          itemCount: { $sum: 1 },
        },
      },
    ]);

    res.json({ pieChartData });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.get('/initialize-database', async (req, res) => {
  try {
    const thirdPartyApiUrl = 'https://s3.amazonaws.com/roxiler.com/product_transaction.json';
    const response = await axios.get(thirdPartyApiUrl);
    const seedData = response.data;

    // Insert seed data into the database
    await Transaction.insertMany(seedData);

    res.json({ message: 'Database initialized successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// List all transactions with search and pagination
app.get('/list-transactions', async (req, res) => {
  try {
    const { page = 1, perPage = 10, search = '' } = req.query;

    // Build the query based on search parameters
    const query = search
      ? {
          $or: [
            { product: { $regex: search, $options: 'i' } },
            { description: { $regex: search, $options: 'i' } },
            { price: { $eq: parseFloat(search) } },
          ],
        }
      : {};

    // Fetch transactions with pagination and search
    const transactions = await Transaction.find(query)
      .skip((page - 1) * perPage)
      .limit(parseInt(perPage));

    res.json({ transactions });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// API for statistics
app.get('/statistics', async (req, res) => {
  try {
    const { month } = req.query;

    if (!month) {
      return res.status(400).json({ error: 'Month parameter is required' });
    }

    const startOfMonth = new Date(`${month}-01`);
    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(startOfMonth.getMonth() + 1);

    // Calculate total sale amount of selected month
    const totalSaleAmount = await Transaction.aggregate([
      {
        $match: {
          dateOfSale: {
            $gte: startOfMonth,
            $lt: endOfMonth,
          },
        },
      },
      {
        $group: {
          _id: null,
          totalSaleAmount: { $sum: '$price' },
        },
      },
    ]);

    // Calculate total number of sold items of selected month
    const totalSoldItems = await Transaction.countDocuments({
      dateOfSale: {
        $gte: startOfMonth,
        $lt: endOfMonth,
      },
    });

    // Calculate total number of not sold items of selected month
    const totalNotSoldItems = await Transaction.countDocuments({
      dateOfSale: {
        $lt: startOfMonth,
      },
    });

    res.json({
      totalSaleAmount: totalSaleAmount.length > 0 ? totalSaleAmount[0].totalSaleAmount : 0,
      totalSoldItems,
      totalNotSoldItems,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// API for bar chart
app.get('/bar-chart', async (req, res) => {
  try {
    const { month } = req.query;

    if (!month) {
      return res.status(400).json({ error: 'Month parameter is required' });
    }

    const startOfMonth = new Date(`${month}-01`);
    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(startOfMonth.getMonth() + 1);

    // Define price ranges
    const priceRanges = [
      { min: 0, max: 100 },
      { min: 101, max: 200 },
      { min: 201, max: 300 },
      { min: 301, max: 400 },
      { min: 401, max: 500 },
      { min: 501, max: 600 },
      { min: 601, max: 700 },
      { min: 701, max: 800 },
      { min: 801, max: 900 },
      { min: 901, max: Infinity },
    ];

    const barChartData = [];

    // Iterate through price ranges and count items in each range
    for (const range of priceRanges) {
      const count = await Transaction.countDocuments({
        dateOfSale: {
          $gte: startOfMonth,
          $lt: endOfMonth,
        },
        price: {
          $gte: range.min,
          $lt: range.max,
        },
      });

      barChartData.push({ priceRange: `${range.min}-${range.max}`, itemCount: count });
    }

    res.json({ barChartData });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// API for pie chart
app.get('/pie-chart', async (req, res) => {
  try {
    const { month } = req.query;

    if (!month) {
      return res.status(400).json({ error: 'Month parameter is required' });
    }

    const startOfMonth = new Date(`${month}-01`);
    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(startOfMonth.getMonth() + 1);

    // Aggregate to find unique categories and count items from each category
    const pieChartData = await Transaction.aggregate([
      {
        $match: {
          dateOfSale: {
            $gte: startOfMonth,
            $lt: endOfMonth,
          },
        },
      },
      {
        $group: {
          _id: '$category',
          itemCount: { $sum: 1 },
        },
      },
    ]);

    res.json({ pieChartData });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Combined API
app.get('/combined-data', async (req, res) => {
  try {
    // Fetch data from the three APIs and combine responses
    const initializeDatabaseResponse = await axios.get('http://localhost:3000/initialize-database');
    const listTransactionsResponse = await axios.get('http://localhost:3000/list-transactions');
    const statisticsResponse = await axios.get('http://localhost:3000/statistics');
    const barChartResponse = await axios.get('http://localhost')









// Start the Express server
app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});
